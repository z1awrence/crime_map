ggplot(data=subset(pf, !is.na(pf$year_joined.bucket)), aes(x=age, y=friend_count)) + geom_line(aes(color=year_joined.bucket), stat='summary', fun.y = mean) +
geom_line(stat='summary', fun.y=mean, linetype=2)
Lesson 5
========================================================
### Multivariate Data
Notes:
***
### Moira Perceived Audience Size Colored by Age
Notes:
***
### Third Qualitative Variable
Notes:
```{r Third Qualitative Variable}
pf <- read.csv('Desktop/School/summer/data_udacity/EDA_Course_Materials/lesson3/pseudo_facebook.tsv', header=TRUE, sep="\t")
library(ggplot2)
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_boxplot() +
stat_summary(fun.y = mean, geom='point', shape=4)
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_boxplot() +
stat_summary(fun.y = median, geom='point', shape=4)
library(dplyr)
?group_by
by_age <- group_by(pf, age, gender)
?summarise
pf.fc_by_age_gender <- summarize(by_age,
mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()
)
head(pf.fc_by_age_gender)
pf.fc_by_age_gender <- pf %.%
filter(!is.na(gender)) %.%
group_by(age, gender) %.%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n=n()) %.%
ungroup() %.%
arrange(age)
```
***
### Plotting Conditional Summaries
Notes:
```{r Plotting Conditional Summaries}
ggplot(data=pf.fc_by_age_gender, aes(x=age, y=median_friend_count, color=gender)) +
geom_line()
```
***
### Thinking in Ratios
Notes:
***
### Wide and Long Format
Notes:
***
### Reshaping Data
Notes:
```{r}
library(reshape2)
library(ggplot2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = "median_friend_count")
```
***
### Ratio Plot
Notes:
```{r Ratio Plot}
ggplot(data=pf.fc_by_age_gender.wide, aes(x=age , y = female/male)) +
geom_hline(aes(yintercept=1), linetype=2)+
geom_line()
```
***
### Third Quantitative Variable
Notes:
```{r Third Quantitative Variable}
head(pf)
pf$year_joined <- floor(2014 - (pf$tenure/365))
```
***
### Cut a Variable
Notes:
```{r Cut a Variable}
summary(pf$year_joined)
table(pf$year_joined)
?cut
pf$year_joined.bucket <- cut(pf$year_joined, breaks = c(2004,2009,2011,2012, 2014))
table(pf$year_joined.bucket)
```
***
### Plotting it All Together
Notes:
```{r Plotting it All Together}
table(pf$year_joined.bucket, useNA='ifany')
ggplot(data=subset(pf, !is.na(pf$year_joined.bucket)), aes(x=age, y=friend_count)) + geom_line(aes(color=year_joined.bucket), stat='summary', fun.y = median)
?geom_line
```
***
### Plot the Grand Mean
Notes:
```{r Plot the Grand Mean}
ggplot(data=subset(pf, !is.na(pf$year_joined.bucket)), aes(x=age, y=friend_count)) + geom_line(aes(color=year_joined.bucket), stat='summary', fun.y = mean) +
geom_line(stat='summary', fun.y=mean, linetype=2)
```
***
### Friending Rate
Notes:
```{r Friending Rate}
?eval
```
***
### Friendships Initiated
Notes:
What is the median friend rate?
What is the maximum friend rate?
```{r Friendships Initiated}
```
***
### Bias-Variance Tradeoff Revisited
Notes:
```{r Bias-Variance Tradeoff Revisited}
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 30 * round(tenure / 30), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 90 * round(tenure / 90), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
```
***
### Sean's NFL Fan Sentiment Study
Notes:
***
### Introducing the Yogurt Data Set
Notes:
***
### Histograms Revisited
Notes:
```{r Histograms Revisited}
```
***
### Number of Purchases
Notes:
```{r Number of Purchases}
```
***
### Prices over Time
Notes:
```{r Prices over Time}
```
***
### Sampling Observations
Notes:
***
### Looking at Samples of Households
```{r Looking at Sample of Households}
```
***
### The Limits of Cross Sectional Data
Notes:
***
### Many Variables
Notes:
***
### Scatterplot Matrix
Notes:
***
### Even More Variables
Notes:
***
### Heat Maps
Notes:
```{r}
nci <- read.table("nci.tsv")
colnames(nci) <- c(1:64)
```
```{r}
nci.long.samp <- melt(as.matrix(nci[1:200,]))
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
```
***
### Analyzing Three of More Variables
Reflection:
***
Click **KnitHTML** to see all of your hard work and to have an html
page of this lesson, your answers, and your notes!
ggplot(data=subset(pf, !is.na(pf$year_joined.bucket)), aes(x=age, y=friend_count)) + geom_line(aes(color=year_joined.bucket), stat='summary', fun.y = mean) +
geom_line(stat='summary', fun.y=mean, linetype=2)
head(pf)
?summary
summary(pf$tenure)
summary(pf$tenure, pf$tenure)
summary(pf$tenure, pf$gender)
with(subset(pf, tenure>1), summary, tenure/friend_count)
summary(subset(pf, tenure>1), tenure/friend_count)
test <- subset(pf, tenure>1)
summary(test$tenure / test$friend_count)
summary(test$friend_count / test$tenure)
test <- subset(pf, tenure>=1)
summary(test$friend_count / test$tenure)
ggplot(data=subset(pf, tenure >=1), aes(x=tenure, y= friend_count/tenure, color=year_joined.bucket)) + geom_line()
ggplot(data=subset(pf, tenure >=1), aes(x=tenure, y= friendship_initiated/tenure, color=year_joined.bucket)) + geom_line()
ggplot(data=subset(pf, tenure >=1), aes(x=tenure, y= friendships_initiated/tenure, color=year_joined.bucket)) + geom_line()
ggplot(data=subset(pf, tenure >=1), aes(x=tenure, y= (friendships_initiated /tenure), ) + geom_line(aes(color=year_joined.bucket)))
ggplot(data=subset(pf, tenure >=1), aes(x=tenure, y= (friendships_initiated /tenure), )) + geom_line(aes(color=year_joined.bucket)))
ggplot(data=subset(pf, tenure >=1), aes(x=tenure, y= (friendships_initiated /tenure), )) + geom_line(aes(color=year_joined.bucket))
ggplot(data=subset(pf, tenure >=1), aes(x=tenure, y= (friendships_initiated /tenure), )) + geom_line(aes(color=year_joined.bucket), stat="summary", fun.y = mean)
?geom_smooth
ggplot(data=subset(pf, tenure >=1), aes(x=tenure, y= (friendships_initiated /tenure), )) + geom_smooth(aes(color=year_joined.bucket), stat="summary", fun.y = mean)
ggplot(data=subset(pf, tenure >=1), aes(x=tenure, y= (friendships_initiated /tenure), )) + geom_smooth(aes(color=year_joined.bucket))
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
ggplot(data=diamonds, aes(x=price))
ggplot(data=diamonds, aes(x=price)) + geom_histogram()
ggplot(data=diamonds, aes(x=price), binwidth = 50) + geom_histogram()
ggplot(data=diamonds, aes(x=price)) + geom_histogram(binwidth = 50)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram() +
scale_x_log10()
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=50) +
scale_x_log10()
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=10) +
scale_x_log10()
ggplot(data=diamonds, aes(x=price)) +
geom_histogram() +
scale_x_log10()
ggplot(data=diamonds, aes(x=price)) + geom_histogram(binwidth = 50)
ggplot(data=diamonds, aes(x=price)) + geom_histogram()
ggplot(data=diamonds, aes(x=price)) +
geom_histogram() +
scale_x_log10()
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(data=diamonds, aes(x=price)) +
geom_histogram() +
scale_x_log10()
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwdith=1) +
scale_x_log10()
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwdith=5) +
scale_x_log10()
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwdith=10) +
scale_x_log10()
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(aes(binwdith=10)) +
scale_x_log10()
head(sort(table(diamonds$carat), decreasing=T))
head(sort(table(diamonds$price), decreasing=T))
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha=.5, size=.75) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price, color=clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = Color, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = color, reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "color", reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "color", reverse = False,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
runApp('crime')
library(shinyapps)
getwd()
runApp('crime')
library(shiny)
runApp('crime')
setwd('Desktop/General_programming/crime_map')
runApp('crime')
